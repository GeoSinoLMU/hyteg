#!/usr/bin/env python3

import numpy as np
import scipy.special
from sympy import *
from enum import Enum
import sys

x,h,f = symbols('x,h,f')

DEGREE = 2

monomials = []
coeffs = []

for d in range(DEGREE+1):
  monomials.append(x**d)
  coeffs.append(symbols('a{}'.format(d)))
  coeffs[d].name = 'poly1_.getCoefficient({})'.format(d)

num_coefficients = len(monomials)

f = 0

for k in range(num_coefficients):
  f += coeffs[k] * monomials[k]

delta = f.subs(x, x + h) - f

print('deltas[{}] = {};'.format(0, ccode(f)))
print('deltas[{}] = {};'.format(1, ccode(delta)))

for k in range(2, num_coefficients):  
  delta = delta.subs(x, x+h) - delta
  print('deltas[{}] = {};'.format(k, ccode(delta)))


# Generate code
# x.name = 'x'

#for i in range(num_coefficients):


# def generate(name):
#   print('class {} {{'.format(name))
#   print('public:')

#   print('  static real_t eval(uint_t basis, real_t x) {')

#   print('    switch(basis) {')

#   for i in range(num_coefficients):
#     print('        case {}:'.format(i))

#     poly = monomials[i]

#     print('        return {};'.format(ccode(poly)))

#   print('      default:')
#   print('        WALBERLA_ABORT("Polynomial basis " << basis << " was not generated");')

#   print('    }')
#   print('  }')

#   print('};\n')


# print('#pragma once\n')
# print('// This file was generated by the monomial_basis_1d.py Python script')
# print('// Do not edit it by hand\n')
# print('namespace hhg {\n')

# generate('MonomialBasis1D')

# print('}')
