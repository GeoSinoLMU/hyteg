#pragma once

#include "Polynomial1D.hpp"
#include "Polynomial2D.hpp"

namespace hhg {

template<uint_t Degree, uint_t InterpolationLevel>
class Polynomial2DEvaluator {
public:

  typedef Polynomial1D<Degree, MonomialBasis1D> Polynomial1;
  typedef Polynomial2D<Degree, InterpolationLevel, MonomialBasis2D> Polynomial2;

  Polynomial2DEvaluator(const Polynomial2& poly)
    : poly2_(poly) {
  }

  real_t eval(const Point2D &x) const {
    return poly2_.eval(x);
  }

  void setY(real_t y) {

    for (uint_t degree = 0; degree <= Degree; ++degree) {
      poly1_.setCoefficient(degree, 0.0);
    }

    int start = 0;

    for (uint_t coeff = 0; coeff <= Degree; ++coeff) {

      int idx = start;

      for(uint_t degree = 0; degree <= Degree-coeff; ++degree) {

        poly1_.addToCoefficient(coeff, poly2_.getCoefficient(idx) * std::pow(y, degree));

        idx += coeff + degree + 2;
      }

      start += coeff + 1;
    }
  }

  real_t evalX(real_t x) const {
    return poly1_.eval(x);
  }

  real_t setStartX(real_t x, real_t h) {
    static_assert(Degree <= 7, "Polynomial2DEvaluator not implemented for degree larger than 7");
    if (Degree == 0) {
      deltas[0] = poly1_.getCoefficient(0);
    }
    if (Degree == 1) {
      deltas[0] = poly1_.getCoefficient(0) + poly1_.getCoefficient(1)*x;
      deltas[1] = -poly1_.getCoefficient(1)*x + poly1_.getCoefficient(1)*(h + x);
    }
    if (Degree == 2) {
      deltas[0] = poly1_.getCoefficient(0) + poly1_.getCoefficient(1)*x + poly1_.getCoefficient(2)*pow(x, 2);
      deltas[1] = -poly1_.getCoefficient(1)*x + poly1_.getCoefficient(1)*(h + x) - poly1_.getCoefficient(2)*pow(x, 2) + poly1_.getCoefficient(2)*pow(h + x, 2);
      deltas[2] = poly1_.getCoefficient(1)*x - 2*poly1_.getCoefficient(1)*(h + x) + poly1_.getCoefficient(1)*(2*h + x) + poly1_.getCoefficient(2)*pow(x, 2) - 2*poly1_.getCoefficient(2)*pow(h + x, 2) + poly1_.getCoefficient(2)*pow(2*h + x, 2);
    }
    if (Degree == 3) {
      deltas[0] = poly1_.getCoefficient(0) + poly1_.getCoefficient(1)*x + poly1_.getCoefficient(2)*pow(x, 2) + poly1_.getCoefficient(3)*pow(x, 3);
      deltas[1] = -poly1_.getCoefficient(1)*x + poly1_.getCoefficient(1)*(h + x) - poly1_.getCoefficient(2)*pow(x, 2) + poly1_.getCoefficient(2)*pow(h + x, 2) - poly1_.getCoefficient(3)*pow(x, 3) + poly1_.getCoefficient(3)*pow(h + x, 3);
      deltas[2] = poly1_.getCoefficient(1)*x - 2*poly1_.getCoefficient(1)*(h + x) + poly1_.getCoefficient(1)*(2*h + x) + poly1_.getCoefficient(2)*pow(x, 2) - 2*poly1_.getCoefficient(2)*pow(h + x, 2) + poly1_.getCoefficient(2)*pow(2*h + x, 2) + poly1_.getCoefficient(3)*pow(x, 3) - 2*poly1_.getCoefficient(3)*pow(h + x, 3) + poly1_.getCoefficient(3)*pow(2*h + x, 3);
      deltas[3] = -poly1_.getCoefficient(1)*x + 3*poly1_.getCoefficient(1)*(h + x) - 3*poly1_.getCoefficient(1)*(2*h + x) + poly1_.getCoefficient(1)*(3*h + x) - poly1_.getCoefficient(2)*pow(x, 2) + 3*poly1_.getCoefficient(2)*pow(h + x, 2) - 3*poly1_.getCoefficient(2)*pow(2*h + x, 2) + poly1_.getCoefficient(2)*pow(3*h + x, 2) - poly1_.getCoefficient(3)*pow(x, 3) + 3*poly1_.getCoefficient(3)*pow(h + x, 3) - 3*poly1_.getCoefficient(3)*pow(2*h + x, 3) + poly1_.getCoefficient(3)*pow(3*h + x, 3);
    }
    if (Degree == 4) {
      deltas[0] = poly1_.getCoefficient(0) + poly1_.getCoefficient(1)*x + poly1_.getCoefficient(2)*pow(x, 2) + poly1_.getCoefficient(3)*pow(x, 3) + poly1_.getCoefficient(4)*pow(x, 4);
      deltas[1] = -poly1_.getCoefficient(1)*x + poly1_.getCoefficient(1)*(h + x) - poly1_.getCoefficient(2)*pow(x, 2) + poly1_.getCoefficient(2)*pow(h + x, 2) - poly1_.getCoefficient(3)*pow(x, 3) + poly1_.getCoefficient(3)*pow(h + x, 3) - poly1_.getCoefficient(4)*pow(x, 4) + poly1_.getCoefficient(4)*pow(h + x, 4);
      deltas[2] = poly1_.getCoefficient(1)*x - 2*poly1_.getCoefficient(1)*(h + x) + poly1_.getCoefficient(1)*(2*h + x) + poly1_.getCoefficient(2)*pow(x, 2) - 2*poly1_.getCoefficient(2)*pow(h + x, 2) + poly1_.getCoefficient(2)*pow(2*h + x, 2) + poly1_.getCoefficient(3)*pow(x, 3) - 2*poly1_.getCoefficient(3)*pow(h + x, 3) + poly1_.getCoefficient(3)*pow(2*h + x, 3) + poly1_.getCoefficient(4)*pow(x, 4) - 2*poly1_.getCoefficient(4)*pow(h + x, 4) + poly1_.getCoefficient(4)*pow(2*h + x, 4);
      deltas[3] = -poly1_.getCoefficient(1)*x + 3*poly1_.getCoefficient(1)*(h + x) - 3*poly1_.getCoefficient(1)*(2*h + x) + poly1_.getCoefficient(1)*(3*h + x) - poly1_.getCoefficient(2)*pow(x, 2) + 3*poly1_.getCoefficient(2)*pow(h + x, 2) - 3*poly1_.getCoefficient(2)*pow(2*h + x, 2) + poly1_.getCoefficient(2)*pow(3*h + x, 2) - poly1_.getCoefficient(3)*pow(x, 3) + 3*poly1_.getCoefficient(3)*pow(h + x, 3) - 3*poly1_.getCoefficient(3)*pow(2*h + x, 3) + poly1_.getCoefficient(3)*pow(3*h + x, 3) - poly1_.getCoefficient(4)*pow(x, 4) + 3*poly1_.getCoefficient(4)*pow(h + x, 4) - 3*poly1_.getCoefficient(4)*pow(2*h + x, 4) + poly1_.getCoefficient(4)*pow(3*h + x, 4);
      deltas[4] = poly1_.getCoefficient(1)*x - 4*poly1_.getCoefficient(1)*(h + x) + 6*poly1_.getCoefficient(1)*(2*h + x) - 4*poly1_.getCoefficient(1)*(3*h + x) + poly1_.getCoefficient(1)*(4*h + x) + poly1_.getCoefficient(2)*pow(x, 2) - 4*poly1_.getCoefficient(2)*pow(h + x, 2) + 6*poly1_.getCoefficient(2)*pow(2*h + x, 2) - 4*poly1_.getCoefficient(2)*pow(3*h + x, 2) + poly1_.getCoefficient(2)*pow(4*h + x, 2) + poly1_.getCoefficient(3)*pow(x, 3) - 4*poly1_.getCoefficient(3)*pow(h + x, 3) + 6*poly1_.getCoefficient(3)*pow(2*h + x, 3) - 4*poly1_.getCoefficient(3)*pow(3*h + x, 3) + poly1_.getCoefficient(3)*pow(4*h + x, 3) + poly1_.getCoefficient(4)*pow(x, 4) - 4*poly1_.getCoefficient(4)*pow(h + x, 4) + 6*poly1_.getCoefficient(4)*pow(2*h + x, 4) - 4*poly1_.getCoefficient(4)*pow(3*h + x, 4) + poly1_.getCoefficient(4)*pow(4*h + x, 4);
    }
    if (Degree == 5) {
      deltas[0] = poly1_.getCoefficient(0) + poly1_.getCoefficient(1)*x + poly1_.getCoefficient(2)*pow(x, 2) + poly1_.getCoefficient(3)*pow(x, 3) + poly1_.getCoefficient(4)*pow(x, 4) + poly1_.getCoefficient(5)*pow(x, 5);
      deltas[1] = -poly1_.getCoefficient(1)*x + poly1_.getCoefficient(1)*(h + x) - poly1_.getCoefficient(2)*pow(x, 2) + poly1_.getCoefficient(2)*pow(h + x, 2) - poly1_.getCoefficient(3)*pow(x, 3) + poly1_.getCoefficient(3)*pow(h + x, 3) - poly1_.getCoefficient(4)*pow(x, 4) + poly1_.getCoefficient(4)*pow(h + x, 4) - poly1_.getCoefficient(5)*pow(x, 5) + poly1_.getCoefficient(5)*pow(h + x, 5);
      deltas[2] = poly1_.getCoefficient(1)*x - 2*poly1_.getCoefficient(1)*(h + x) + poly1_.getCoefficient(1)*(2*h + x) + poly1_.getCoefficient(2)*pow(x, 2) - 2*poly1_.getCoefficient(2)*pow(h + x, 2) + poly1_.getCoefficient(2)*pow(2*h + x, 2) + poly1_.getCoefficient(3)*pow(x, 3) - 2*poly1_.getCoefficient(3)*pow(h + x, 3) + poly1_.getCoefficient(3)*pow(2*h + x, 3) + poly1_.getCoefficient(4)*pow(x, 4) - 2*poly1_.getCoefficient(4)*pow(h + x, 4) + poly1_.getCoefficient(4)*pow(2*h + x, 4) + poly1_.getCoefficient(5)*pow(x, 5) - 2*poly1_.getCoefficient(5)*pow(h + x, 5) + poly1_.getCoefficient(5)*pow(2*h + x, 5);
      deltas[3] = -poly1_.getCoefficient(1)*x + 3*poly1_.getCoefficient(1)*(h + x) - 3*poly1_.getCoefficient(1)*(2*h + x) + poly1_.getCoefficient(1)*(3*h + x) - poly1_.getCoefficient(2)*pow(x, 2) + 3*poly1_.getCoefficient(2)*pow(h + x, 2) - 3*poly1_.getCoefficient(2)*pow(2*h + x, 2) + poly1_.getCoefficient(2)*pow(3*h + x, 2) - poly1_.getCoefficient(3)*pow(x, 3) + 3*poly1_.getCoefficient(3)*pow(h + x, 3) - 3*poly1_.getCoefficient(3)*pow(2*h + x, 3) + poly1_.getCoefficient(3)*pow(3*h + x, 3) - poly1_.getCoefficient(4)*pow(x, 4) + 3*poly1_.getCoefficient(4)*pow(h + x, 4) - 3*poly1_.getCoefficient(4)*pow(2*h + x, 4) + poly1_.getCoefficient(4)*pow(3*h + x, 4) - poly1_.getCoefficient(5)*pow(x, 5) + 3*poly1_.getCoefficient(5)*pow(h + x, 5) - 3*poly1_.getCoefficient(5)*pow(2*h + x, 5) + poly1_.getCoefficient(5)*pow(3*h + x, 5);
      deltas[4] = poly1_.getCoefficient(1)*x - 4*poly1_.getCoefficient(1)*(h + x) + 6*poly1_.getCoefficient(1)*(2*h + x) - 4*poly1_.getCoefficient(1)*(3*h + x) + poly1_.getCoefficient(1)*(4*h + x) + poly1_.getCoefficient(2)*pow(x, 2) - 4*poly1_.getCoefficient(2)*pow(h + x, 2) + 6*poly1_.getCoefficient(2)*pow(2*h + x, 2) - 4*poly1_.getCoefficient(2)*pow(3*h + x, 2) + poly1_.getCoefficient(2)*pow(4*h + x, 2) + poly1_.getCoefficient(3)*pow(x, 3) - 4*poly1_.getCoefficient(3)*pow(h + x, 3) + 6*poly1_.getCoefficient(3)*pow(2*h + x, 3) - 4*poly1_.getCoefficient(3)*pow(3*h + x, 3) + poly1_.getCoefficient(3)*pow(4*h + x, 3) + poly1_.getCoefficient(4)*pow(x, 4) - 4*poly1_.getCoefficient(4)*pow(h + x, 4) + 6*poly1_.getCoefficient(4)*pow(2*h + x, 4) - 4*poly1_.getCoefficient(4)*pow(3*h + x, 4) + poly1_.getCoefficient(4)*pow(4*h + x, 4) + poly1_.getCoefficient(5)*pow(x, 5) - 4*poly1_.getCoefficient(5)*pow(h + x, 5) + 6*poly1_.getCoefficient(5)*pow(2*h + x, 5) - 4*poly1_.getCoefficient(5)*pow(3*h + x, 5) + poly1_.getCoefficient(5)*pow(4*h + x, 5);
      deltas[5] = -poly1_.getCoefficient(1)*x + 5*poly1_.getCoefficient(1)*(h + x) - 10*poly1_.getCoefficient(1)*(2*h + x) + 10*poly1_.getCoefficient(1)*(3*h + x) - 5*poly1_.getCoefficient(1)*(4*h + x) + poly1_.getCoefficient(1)*(5*h + x) - poly1_.getCoefficient(2)*pow(x, 2) + 5*poly1_.getCoefficient(2)*pow(h + x, 2) - 10*poly1_.getCoefficient(2)*pow(2*h + x, 2) + 10*poly1_.getCoefficient(2)*pow(3*h + x, 2) - 5*poly1_.getCoefficient(2)*pow(4*h + x, 2) + poly1_.getCoefficient(2)*pow(5*h + x, 2) - poly1_.getCoefficient(3)*pow(x, 3) + 5*poly1_.getCoefficient(3)*pow(h + x, 3) - 10*poly1_.getCoefficient(3)*pow(2*h + x, 3) + 10*poly1_.getCoefficient(3)*pow(3*h + x, 3) - 5*poly1_.getCoefficient(3)*pow(4*h + x, 3) + poly1_.getCoefficient(3)*pow(5*h + x, 3) - poly1_.getCoefficient(4)*pow(x, 4) + 5*poly1_.getCoefficient(4)*pow(h + x, 4) - 10*poly1_.getCoefficient(4)*pow(2*h + x, 4) + 10*poly1_.getCoefficient(4)*pow(3*h + x, 4) - 5*poly1_.getCoefficient(4)*pow(4*h + x, 4) + poly1_.getCoefficient(4)*pow(5*h + x, 4) - poly1_.getCoefficient(5)*pow(x, 5) + 5*poly1_.getCoefficient(5)*pow(h + x, 5) - 10*poly1_.getCoefficient(5)*pow(2*h + x, 5) + 10*poly1_.getCoefficient(5)*pow(3*h + x, 5) - 5*poly1_.getCoefficient(5)*pow(4*h + x, 5) + poly1_.getCoefficient(5)*pow(5*h + x, 5);
    }
    if (Degree == 6) {
      deltas[0] = poly1_.getCoefficient(0) + poly1_.getCoefficient(1)*x + poly1_.getCoefficient(2)*pow(x, 2) + poly1_.getCoefficient(3)*pow(x, 3) + poly1_.getCoefficient(4)*pow(x, 4) + poly1_.getCoefficient(5)*pow(x, 5) + poly1_.getCoefficient(6)*pow(x, 6);
      deltas[1] = -poly1_.getCoefficient(1)*x + poly1_.getCoefficient(1)*(h + x) - poly1_.getCoefficient(2)*pow(x, 2) + poly1_.getCoefficient(2)*pow(h + x, 2) - poly1_.getCoefficient(3)*pow(x, 3) + poly1_.getCoefficient(3)*pow(h + x, 3) - poly1_.getCoefficient(4)*pow(x, 4) + poly1_.getCoefficient(4)*pow(h + x, 4) - poly1_.getCoefficient(5)*pow(x, 5) + poly1_.getCoefficient(5)*pow(h + x, 5) - poly1_.getCoefficient(6)*pow(x, 6) + poly1_.getCoefficient(6)*pow(h + x, 6);
      deltas[2] = poly1_.getCoefficient(1)*x - 2*poly1_.getCoefficient(1)*(h + x) + poly1_.getCoefficient(1)*(2*h + x) + poly1_.getCoefficient(2)*pow(x, 2) - 2*poly1_.getCoefficient(2)*pow(h + x, 2) + poly1_.getCoefficient(2)*pow(2*h + x, 2) + poly1_.getCoefficient(3)*pow(x, 3) - 2*poly1_.getCoefficient(3)*pow(h + x, 3) + poly1_.getCoefficient(3)*pow(2*h + x, 3) + poly1_.getCoefficient(4)*pow(x, 4) - 2*poly1_.getCoefficient(4)*pow(h + x, 4) + poly1_.getCoefficient(4)*pow(2*h + x, 4) + poly1_.getCoefficient(5)*pow(x, 5) - 2*poly1_.getCoefficient(5)*pow(h + x, 5) + poly1_.getCoefficient(5)*pow(2*h + x, 5) + poly1_.getCoefficient(6)*pow(x, 6) - 2*poly1_.getCoefficient(6)*pow(h + x, 6) + poly1_.getCoefficient(6)*pow(2*h + x, 6);
      deltas[3] = -poly1_.getCoefficient(1)*x + 3*poly1_.getCoefficient(1)*(h + x) - 3*poly1_.getCoefficient(1)*(2*h + x) + poly1_.getCoefficient(1)*(3*h + x) - poly1_.getCoefficient(2)*pow(x, 2) + 3*poly1_.getCoefficient(2)*pow(h + x, 2) - 3*poly1_.getCoefficient(2)*pow(2*h + x, 2) + poly1_.getCoefficient(2)*pow(3*h + x, 2) - poly1_.getCoefficient(3)*pow(x, 3) + 3*poly1_.getCoefficient(3)*pow(h + x, 3) - 3*poly1_.getCoefficient(3)*pow(2*h + x, 3) + poly1_.getCoefficient(3)*pow(3*h + x, 3) - poly1_.getCoefficient(4)*pow(x, 4) + 3*poly1_.getCoefficient(4)*pow(h + x, 4) - 3*poly1_.getCoefficient(4)*pow(2*h + x, 4) + poly1_.getCoefficient(4)*pow(3*h + x, 4) - poly1_.getCoefficient(5)*pow(x, 5) + 3*poly1_.getCoefficient(5)*pow(h + x, 5) - 3*poly1_.getCoefficient(5)*pow(2*h + x, 5) + poly1_.getCoefficient(5)*pow(3*h + x, 5) - poly1_.getCoefficient(6)*pow(x, 6) + 3*poly1_.getCoefficient(6)*pow(h + x, 6) - 3*poly1_.getCoefficient(6)*pow(2*h + x, 6) + poly1_.getCoefficient(6)*pow(3*h + x, 6);
      deltas[4] = poly1_.getCoefficient(1)*x - 4*poly1_.getCoefficient(1)*(h + x) + 6*poly1_.getCoefficient(1)*(2*h + x) - 4*poly1_.getCoefficient(1)*(3*h + x) + poly1_.getCoefficient(1)*(4*h + x) + poly1_.getCoefficient(2)*pow(x, 2) - 4*poly1_.getCoefficient(2)*pow(h + x, 2) + 6*poly1_.getCoefficient(2)*pow(2*h + x, 2) - 4*poly1_.getCoefficient(2)*pow(3*h + x, 2) + poly1_.getCoefficient(2)*pow(4*h + x, 2) + poly1_.getCoefficient(3)*pow(x, 3) - 4*poly1_.getCoefficient(3)*pow(h + x, 3) + 6*poly1_.getCoefficient(3)*pow(2*h + x, 3) - 4*poly1_.getCoefficient(3)*pow(3*h + x, 3) + poly1_.getCoefficient(3)*pow(4*h + x, 3) + poly1_.getCoefficient(4)*pow(x, 4) - 4*poly1_.getCoefficient(4)*pow(h + x, 4) + 6*poly1_.getCoefficient(4)*pow(2*h + x, 4) - 4*poly1_.getCoefficient(4)*pow(3*h + x, 4) + poly1_.getCoefficient(4)*pow(4*h + x, 4) + poly1_.getCoefficient(5)*pow(x, 5) - 4*poly1_.getCoefficient(5)*pow(h + x, 5) + 6*poly1_.getCoefficient(5)*pow(2*h + x, 5) - 4*poly1_.getCoefficient(5)*pow(3*h + x, 5) + poly1_.getCoefficient(5)*pow(4*h + x, 5) + poly1_.getCoefficient(6)*pow(x, 6) - 4*poly1_.getCoefficient(6)*pow(h + x, 6) + 6*poly1_.getCoefficient(6)*pow(2*h + x, 6) - 4*poly1_.getCoefficient(6)*pow(3*h + x, 6) + poly1_.getCoefficient(6)*pow(4*h + x, 6);
      deltas[5] = -poly1_.getCoefficient(1)*x + 5*poly1_.getCoefficient(1)*(h + x) - 10*poly1_.getCoefficient(1)*(2*h + x) + 10*poly1_.getCoefficient(1)*(3*h + x) - 5*poly1_.getCoefficient(1)*(4*h + x) + poly1_.getCoefficient(1)*(5*h + x) - poly1_.getCoefficient(2)*pow(x, 2) + 5*poly1_.getCoefficient(2)*pow(h + x, 2) - 10*poly1_.getCoefficient(2)*pow(2*h + x, 2) + 10*poly1_.getCoefficient(2)*pow(3*h + x, 2) - 5*poly1_.getCoefficient(2)*pow(4*h + x, 2) + poly1_.getCoefficient(2)*pow(5*h + x, 2) - poly1_.getCoefficient(3)*pow(x, 3) + 5*poly1_.getCoefficient(3)*pow(h + x, 3) - 10*poly1_.getCoefficient(3)*pow(2*h + x, 3) + 10*poly1_.getCoefficient(3)*pow(3*h + x, 3) - 5*poly1_.getCoefficient(3)*pow(4*h + x, 3) + poly1_.getCoefficient(3)*pow(5*h + x, 3) - poly1_.getCoefficient(4)*pow(x, 4) + 5*poly1_.getCoefficient(4)*pow(h + x, 4) - 10*poly1_.getCoefficient(4)*pow(2*h + x, 4) + 10*poly1_.getCoefficient(4)*pow(3*h + x, 4) - 5*poly1_.getCoefficient(4)*pow(4*h + x, 4) + poly1_.getCoefficient(4)*pow(5*h + x, 4) - poly1_.getCoefficient(5)*pow(x, 5) + 5*poly1_.getCoefficient(5)*pow(h + x, 5) - 10*poly1_.getCoefficient(5)*pow(2*h + x, 5) + 10*poly1_.getCoefficient(5)*pow(3*h + x, 5) - 5*poly1_.getCoefficient(5)*pow(4*h + x, 5) + poly1_.getCoefficient(5)*pow(5*h + x, 5) - poly1_.getCoefficient(6)*pow(x, 6) + 5*poly1_.getCoefficient(6)*pow(h + x, 6) - 10*poly1_.getCoefficient(6)*pow(2*h + x, 6) + 10*poly1_.getCoefficient(6)*pow(3*h + x, 6) - 5*poly1_.getCoefficient(6)*pow(4*h + x, 6) + poly1_.getCoefficient(6)*pow(5*h + x, 6);
      deltas[6] = poly1_.getCoefficient(1)*x - 6*poly1_.getCoefficient(1)*(h + x) + 15*poly1_.getCoefficient(1)*(2*h + x) - 20*poly1_.getCoefficient(1)*(3*h + x) + 15*poly1_.getCoefficient(1)*(4*h + x) - 6*poly1_.getCoefficient(1)*(5*h + x) + poly1_.getCoefficient(1)*(6*h + x) + poly1_.getCoefficient(2)*pow(x, 2) - 6*poly1_.getCoefficient(2)*pow(h + x, 2) + 15*poly1_.getCoefficient(2)*pow(2*h + x, 2) - 20*poly1_.getCoefficient(2)*pow(3*h + x, 2) + 15*poly1_.getCoefficient(2)*pow(4*h + x, 2) - 6*poly1_.getCoefficient(2)*pow(5*h + x, 2) + poly1_.getCoefficient(2)*pow(6*h + x, 2) + poly1_.getCoefficient(3)*pow(x, 3) - 6*poly1_.getCoefficient(3)*pow(h + x, 3) + 15*poly1_.getCoefficient(3)*pow(2*h + x, 3) - 20*poly1_.getCoefficient(3)*pow(3*h + x, 3) + 15*poly1_.getCoefficient(3)*pow(4*h + x, 3) - 6*poly1_.getCoefficient(3)*pow(5*h + x, 3) + poly1_.getCoefficient(3)*pow(6*h + x, 3) + poly1_.getCoefficient(4)*pow(x, 4) - 6*poly1_.getCoefficient(4)*pow(h + x, 4) + 15*poly1_.getCoefficient(4)*pow(2*h + x, 4) - 20*poly1_.getCoefficient(4)*pow(3*h + x, 4) + 15*poly1_.getCoefficient(4)*pow(4*h + x, 4) - 6*poly1_.getCoefficient(4)*pow(5*h + x, 4) + poly1_.getCoefficient(4)*pow(6*h + x, 4) + poly1_.getCoefficient(5)*pow(x, 5) - 6*poly1_.getCoefficient(5)*pow(h + x, 5) + 15*poly1_.getCoefficient(5)*pow(2*h + x, 5) - 20*poly1_.getCoefficient(5)*pow(3*h + x, 5) + 15*poly1_.getCoefficient(5)*pow(4*h + x, 5) - 6*poly1_.getCoefficient(5)*pow(5*h + x, 5) + poly1_.getCoefficient(5)*pow(6*h + x, 5) + poly1_.getCoefficient(6)*pow(x, 6) - 6*poly1_.getCoefficient(6)*pow(h + x, 6) + 15*poly1_.getCoefficient(6)*pow(2*h + x, 6) - 20*poly1_.getCoefficient(6)*pow(3*h + x, 6) + 15*poly1_.getCoefficient(6)*pow(4*h + x, 6) - 6*poly1_.getCoefficient(6)*pow(5*h + x, 6) + poly1_.getCoefficient(6)*pow(6*h + x, 6);
    }
    if (Degree == 7) {
      deltas[0] = poly1_.getCoefficient(0) + poly1_.getCoefficient(1)*x + poly1_.getCoefficient(2)*pow(x, 2) + poly1_.getCoefficient(3)*pow(x, 3) + poly1_.getCoefficient(4)*pow(x, 4) + poly1_.getCoefficient(5)*pow(x, 5) + poly1_.getCoefficient(6)*pow(x, 6) + poly1_.getCoefficient(7)*pow(x, 7);
      deltas[1] = -poly1_.getCoefficient(1)*x + poly1_.getCoefficient(1)*(h + x) - poly1_.getCoefficient(2)*pow(x, 2) + poly1_.getCoefficient(2)*pow(h + x, 2) - poly1_.getCoefficient(3)*pow(x, 3) + poly1_.getCoefficient(3)*pow(h + x, 3) - poly1_.getCoefficient(4)*pow(x, 4) + poly1_.getCoefficient(4)*pow(h + x, 4) - poly1_.getCoefficient(5)*pow(x, 5) + poly1_.getCoefficient(5)*pow(h + x, 5) - poly1_.getCoefficient(6)*pow(x, 6) + poly1_.getCoefficient(6)*pow(h + x, 6) - poly1_.getCoefficient(7)*pow(x, 7) + poly1_.getCoefficient(7)*pow(h + x, 7);
      deltas[2] = poly1_.getCoefficient(1)*x - 2*poly1_.getCoefficient(1)*(h + x) + poly1_.getCoefficient(1)*(2*h + x) + poly1_.getCoefficient(2)*pow(x, 2) - 2*poly1_.getCoefficient(2)*pow(h + x, 2) + poly1_.getCoefficient(2)*pow(2*h + x, 2) + poly1_.getCoefficient(3)*pow(x, 3) - 2*poly1_.getCoefficient(3)*pow(h + x, 3) + poly1_.getCoefficient(3)*pow(2*h + x, 3) + poly1_.getCoefficient(4)*pow(x, 4) - 2*poly1_.getCoefficient(4)*pow(h + x, 4) + poly1_.getCoefficient(4)*pow(2*h + x, 4) + poly1_.getCoefficient(5)*pow(x, 5) - 2*poly1_.getCoefficient(5)*pow(h + x, 5) + poly1_.getCoefficient(5)*pow(2*h + x, 5) + poly1_.getCoefficient(6)*pow(x, 6) - 2*poly1_.getCoefficient(6)*pow(h + x, 6) + poly1_.getCoefficient(6)*pow(2*h + x, 6) + poly1_.getCoefficient(7)*pow(x, 7) - 2*poly1_.getCoefficient(7)*pow(h + x, 7) + poly1_.getCoefficient(7)*pow(2*h + x, 7);
      deltas[3] = -poly1_.getCoefficient(1)*x + 3*poly1_.getCoefficient(1)*(h + x) - 3*poly1_.getCoefficient(1)*(2*h + x) + poly1_.getCoefficient(1)*(3*h + x) - poly1_.getCoefficient(2)*pow(x, 2) + 3*poly1_.getCoefficient(2)*pow(h + x, 2) - 3*poly1_.getCoefficient(2)*pow(2*h + x, 2) + poly1_.getCoefficient(2)*pow(3*h + x, 2) - poly1_.getCoefficient(3)*pow(x, 3) + 3*poly1_.getCoefficient(3)*pow(h + x, 3) - 3*poly1_.getCoefficient(3)*pow(2*h + x, 3) + poly1_.getCoefficient(3)*pow(3*h + x, 3) - poly1_.getCoefficient(4)*pow(x, 4) + 3*poly1_.getCoefficient(4)*pow(h + x, 4) - 3*poly1_.getCoefficient(4)*pow(2*h + x, 4) + poly1_.getCoefficient(4)*pow(3*h + x, 4) - poly1_.getCoefficient(5)*pow(x, 5) + 3*poly1_.getCoefficient(5)*pow(h + x, 5) - 3*poly1_.getCoefficient(5)*pow(2*h + x, 5) + poly1_.getCoefficient(5)*pow(3*h + x, 5) - poly1_.getCoefficient(6)*pow(x, 6) + 3*poly1_.getCoefficient(6)*pow(h + x, 6) - 3*poly1_.getCoefficient(6)*pow(2*h + x, 6) + poly1_.getCoefficient(6)*pow(3*h + x, 6) - poly1_.getCoefficient(7)*pow(x, 7) + 3*poly1_.getCoefficient(7)*pow(h + x, 7) - 3*poly1_.getCoefficient(7)*pow(2*h + x, 7) + poly1_.getCoefficient(7)*pow(3*h + x, 7);
      deltas[4] = poly1_.getCoefficient(1)*x - 4*poly1_.getCoefficient(1)*(h + x) + 6*poly1_.getCoefficient(1)*(2*h + x) - 4*poly1_.getCoefficient(1)*(3*h + x) + poly1_.getCoefficient(1)*(4*h + x) + poly1_.getCoefficient(2)*pow(x, 2) - 4*poly1_.getCoefficient(2)*pow(h + x, 2) + 6*poly1_.getCoefficient(2)*pow(2*h + x, 2) - 4*poly1_.getCoefficient(2)*pow(3*h + x, 2) + poly1_.getCoefficient(2)*pow(4*h + x, 2) + poly1_.getCoefficient(3)*pow(x, 3) - 4*poly1_.getCoefficient(3)*pow(h + x, 3) + 6*poly1_.getCoefficient(3)*pow(2*h + x, 3) - 4*poly1_.getCoefficient(3)*pow(3*h + x, 3) + poly1_.getCoefficient(3)*pow(4*h + x, 3) + poly1_.getCoefficient(4)*pow(x, 4) - 4*poly1_.getCoefficient(4)*pow(h + x, 4) + 6*poly1_.getCoefficient(4)*pow(2*h + x, 4) - 4*poly1_.getCoefficient(4)*pow(3*h + x, 4) + poly1_.getCoefficient(4)*pow(4*h + x, 4) + poly1_.getCoefficient(5)*pow(x, 5) - 4*poly1_.getCoefficient(5)*pow(h + x, 5) + 6*poly1_.getCoefficient(5)*pow(2*h + x, 5) - 4*poly1_.getCoefficient(5)*pow(3*h + x, 5) + poly1_.getCoefficient(5)*pow(4*h + x, 5) + poly1_.getCoefficient(6)*pow(x, 6) - 4*poly1_.getCoefficient(6)*pow(h + x, 6) + 6*poly1_.getCoefficient(6)*pow(2*h + x, 6) - 4*poly1_.getCoefficient(6)*pow(3*h + x, 6) + poly1_.getCoefficient(6)*pow(4*h + x, 6) + poly1_.getCoefficient(7)*pow(x, 7) - 4*poly1_.getCoefficient(7)*pow(h + x, 7) + 6*poly1_.getCoefficient(7)*pow(2*h + x, 7) - 4*poly1_.getCoefficient(7)*pow(3*h + x, 7) + poly1_.getCoefficient(7)*pow(4*h + x, 7);
      deltas[5] = -poly1_.getCoefficient(1)*x + 5*poly1_.getCoefficient(1)*(h + x) - 10*poly1_.getCoefficient(1)*(2*h + x) + 10*poly1_.getCoefficient(1)*(3*h + x) - 5*poly1_.getCoefficient(1)*(4*h + x) + poly1_.getCoefficient(1)*(5*h + x) - poly1_.getCoefficient(2)*pow(x, 2) + 5*poly1_.getCoefficient(2)*pow(h + x, 2) - 10*poly1_.getCoefficient(2)*pow(2*h + x, 2) + 10*poly1_.getCoefficient(2)*pow(3*h + x, 2) - 5*poly1_.getCoefficient(2)*pow(4*h + x, 2) + poly1_.getCoefficient(2)*pow(5*h + x, 2) - poly1_.getCoefficient(3)*pow(x, 3) + 5*poly1_.getCoefficient(3)*pow(h + x, 3) - 10*poly1_.getCoefficient(3)*pow(2*h + x, 3) + 10*poly1_.getCoefficient(3)*pow(3*h + x, 3) - 5*poly1_.getCoefficient(3)*pow(4*h + x, 3) + poly1_.getCoefficient(3)*pow(5*h + x, 3) - poly1_.getCoefficient(4)*pow(x, 4) + 5*poly1_.getCoefficient(4)*pow(h + x, 4) - 10*poly1_.getCoefficient(4)*pow(2*h + x, 4) + 10*poly1_.getCoefficient(4)*pow(3*h + x, 4) - 5*poly1_.getCoefficient(4)*pow(4*h + x, 4) + poly1_.getCoefficient(4)*pow(5*h + x, 4) - poly1_.getCoefficient(5)*pow(x, 5) + 5*poly1_.getCoefficient(5)*pow(h + x, 5) - 10*poly1_.getCoefficient(5)*pow(2*h + x, 5) + 10*poly1_.getCoefficient(5)*pow(3*h + x, 5) - 5*poly1_.getCoefficient(5)*pow(4*h + x, 5) + poly1_.getCoefficient(5)*pow(5*h + x, 5) - poly1_.getCoefficient(6)*pow(x, 6) + 5*poly1_.getCoefficient(6)*pow(h + x, 6) - 10*poly1_.getCoefficient(6)*pow(2*h + x, 6) + 10*poly1_.getCoefficient(6)*pow(3*h + x, 6) - 5*poly1_.getCoefficient(6)*pow(4*h + x, 6) + poly1_.getCoefficient(6)*pow(5*h + x, 6) - poly1_.getCoefficient(7)*pow(x, 7) + 5*poly1_.getCoefficient(7)*pow(h + x, 7) - 10*poly1_.getCoefficient(7)*pow(2*h + x, 7) + 10*poly1_.getCoefficient(7)*pow(3*h + x, 7) - 5*poly1_.getCoefficient(7)*pow(4*h + x, 7) + poly1_.getCoefficient(7)*pow(5*h + x, 7);
      deltas[6] = poly1_.getCoefficient(1)*x - 6*poly1_.getCoefficient(1)*(h + x) + 15*poly1_.getCoefficient(1)*(2*h + x) - 20*poly1_.getCoefficient(1)*(3*h + x) + 15*poly1_.getCoefficient(1)*(4*h + x) - 6*poly1_.getCoefficient(1)*(5*h + x) + poly1_.getCoefficient(1)*(6*h + x) + poly1_.getCoefficient(2)*pow(x, 2) - 6*poly1_.getCoefficient(2)*pow(h + x, 2) + 15*poly1_.getCoefficient(2)*pow(2*h + x, 2) - 20*poly1_.getCoefficient(2)*pow(3*h + x, 2) + 15*poly1_.getCoefficient(2)*pow(4*h + x, 2) - 6*poly1_.getCoefficient(2)*pow(5*h + x, 2) + poly1_.getCoefficient(2)*pow(6*h + x, 2) + poly1_.getCoefficient(3)*pow(x, 3) - 6*poly1_.getCoefficient(3)*pow(h + x, 3) + 15*poly1_.getCoefficient(3)*pow(2*h + x, 3) - 20*poly1_.getCoefficient(3)*pow(3*h + x, 3) + 15*poly1_.getCoefficient(3)*pow(4*h + x, 3) - 6*poly1_.getCoefficient(3)*pow(5*h + x, 3) + poly1_.getCoefficient(3)*pow(6*h + x, 3) + poly1_.getCoefficient(4)*pow(x, 4) - 6*poly1_.getCoefficient(4)*pow(h + x, 4) + 15*poly1_.getCoefficient(4)*pow(2*h + x, 4) - 20*poly1_.getCoefficient(4)*pow(3*h + x, 4) + 15*poly1_.getCoefficient(4)*pow(4*h + x, 4) - 6*poly1_.getCoefficient(4)*pow(5*h + x, 4) + poly1_.getCoefficient(4)*pow(6*h + x, 4) + poly1_.getCoefficient(5)*pow(x, 5) - 6*poly1_.getCoefficient(5)*pow(h + x, 5) + 15*poly1_.getCoefficient(5)*pow(2*h + x, 5) - 20*poly1_.getCoefficient(5)*pow(3*h + x, 5) + 15*poly1_.getCoefficient(5)*pow(4*h + x, 5) - 6*poly1_.getCoefficient(5)*pow(5*h + x, 5) + poly1_.getCoefficient(5)*pow(6*h + x, 5) + poly1_.getCoefficient(6)*pow(x, 6) - 6*poly1_.getCoefficient(6)*pow(h + x, 6) + 15*poly1_.getCoefficient(6)*pow(2*h + x, 6) - 20*poly1_.getCoefficient(6)*pow(3*h + x, 6) + 15*poly1_.getCoefficient(6)*pow(4*h + x, 6) - 6*poly1_.getCoefficient(6)*pow(5*h + x, 6) + poly1_.getCoefficient(6)*pow(6*h + x, 6) + poly1_.getCoefficient(7)*pow(x, 7) - 6*poly1_.getCoefficient(7)*pow(h + x, 7) + 15*poly1_.getCoefficient(7)*pow(2*h + x, 7) - 20*poly1_.getCoefficient(7)*pow(3*h + x, 7) + 15*poly1_.getCoefficient(7)*pow(4*h + x, 7) - 6*poly1_.getCoefficient(7)*pow(5*h + x, 7) + poly1_.getCoefficient(7)*pow(6*h + x, 7);
      deltas[7] = -poly1_.getCoefficient(1)*x + 7*poly1_.getCoefficient(1)*(h + x) - 21*poly1_.getCoefficient(1)*(2*h + x) + 35*poly1_.getCoefficient(1)*(3*h + x) - 35*poly1_.getCoefficient(1)*(4*h + x) + 21*poly1_.getCoefficient(1)*(5*h + x) - 7*poly1_.getCoefficient(1)*(6*h + x) + poly1_.getCoefficient(1)*(7*h + x) - poly1_.getCoefficient(2)*pow(x, 2) + 7*poly1_.getCoefficient(2)*pow(h + x, 2) - 21*poly1_.getCoefficient(2)*pow(2*h + x, 2) + 35*poly1_.getCoefficient(2)*pow(3*h + x, 2) - 35*poly1_.getCoefficient(2)*pow(4*h + x, 2) + 21*poly1_.getCoefficient(2)*pow(5*h + x, 2) - 7*poly1_.getCoefficient(2)*pow(6*h + x, 2) + poly1_.getCoefficient(2)*pow(7*h + x, 2) - poly1_.getCoefficient(3)*pow(x, 3) + 7*poly1_.getCoefficient(3)*pow(h + x, 3) - 21*poly1_.getCoefficient(3)*pow(2*h + x, 3) + 35*poly1_.getCoefficient(3)*pow(3*h + x, 3) - 35*poly1_.getCoefficient(3)*pow(4*h + x, 3) + 21*poly1_.getCoefficient(3)*pow(5*h + x, 3) - 7*poly1_.getCoefficient(3)*pow(6*h + x, 3) + poly1_.getCoefficient(3)*pow(7*h + x, 3) - poly1_.getCoefficient(4)*pow(x, 4) + 7*poly1_.getCoefficient(4)*pow(h + x, 4) - 21*poly1_.getCoefficient(4)*pow(2*h + x, 4) + 35*poly1_.getCoefficient(4)*pow(3*h + x, 4) - 35*poly1_.getCoefficient(4)*pow(4*h + x, 4) + 21*poly1_.getCoefficient(4)*pow(5*h + x, 4) - 7*poly1_.getCoefficient(4)*pow(6*h + x, 4) + poly1_.getCoefficient(4)*pow(7*h + x, 4) - poly1_.getCoefficient(5)*pow(x, 5) + 7*poly1_.getCoefficient(5)*pow(h + x, 5) - 21*poly1_.getCoefficient(5)*pow(2*h + x, 5) + 35*poly1_.getCoefficient(5)*pow(3*h + x, 5) - 35*poly1_.getCoefficient(5)*pow(4*h + x, 5) + 21*poly1_.getCoefficient(5)*pow(5*h + x, 5) - 7*poly1_.getCoefficient(5)*pow(6*h + x, 5) + poly1_.getCoefficient(5)*pow(7*h + x, 5) - poly1_.getCoefficient(6)*pow(x, 6) + 7*poly1_.getCoefficient(6)*pow(h + x, 6) - 21*poly1_.getCoefficient(6)*pow(2*h + x, 6) + 35*poly1_.getCoefficient(6)*pow(3*h + x, 6) - 35*poly1_.getCoefficient(6)*pow(4*h + x, 6) + 21*poly1_.getCoefficient(6)*pow(5*h + x, 6) - 7*poly1_.getCoefficient(6)*pow(6*h + x, 6) + poly1_.getCoefficient(6)*pow(7*h + x, 6) - poly1_.getCoefficient(7)*pow(x, 7) + 7*poly1_.getCoefficient(7)*pow(h + x, 7) - 21*poly1_.getCoefficient(7)*pow(2*h + x, 7) + 35*poly1_.getCoefficient(7)*pow(3*h + x, 7) - 35*poly1_.getCoefficient(7)*pow(4*h + x, 7) + 21*poly1_.getCoefficient(7)*pow(5*h + x, 7) - 7*poly1_.getCoefficient(7)*pow(6*h + x, 7) + poly1_.getCoefficient(7)*pow(7*h + x, 7);
    }
    return deltas[0];
  }

  real_t incrementEval() {
    if (Degree >= 1) {
      deltas[0] += deltas[1];
    }
    if (Degree >= 2) {
      deltas[1] += deltas[2];
    }
    if (Degree >= 3) {
      deltas[2] += deltas[3];
    }
    if (Degree >= 4) {
      deltas[3] += deltas[4];
    }
    if (Degree >= 5) {
      deltas[4] += deltas[5];
    }
    if (Degree >= 6) {
      deltas[5] += deltas[6];
    }
    if (Degree >= 7) {
      deltas[6] += deltas[7];
    }
    return deltas[0];
  }

private:
  const Polynomial2& poly2_;
  Polynomial1 poly1_;

  std::array<real_t, Degree+1> deltas;

};

}