###############################################################################
##                                                                           ##
##    Genral settings                                                        ##
##                                                                           ##
###############################################################################

stages:
   - test
   - deploy

   
###############################################################################
##                                                                           ##
##    Build templates                                                        ##
##                                                                           ##
###############################################################################

.build_template: &build_definition
   script:
      - export
      - echo "Using up to $(nproc) processors for compilation"
      - $CXX --version
      - cmake --version
      - ccache --version
      - mpirun --version
      - git clone --depth 1 --branch cxx_14 https://i10git.cs.fau.de/thoennes/walberla.git
      - export CCACHE_BASEDIR=$CI_PROJECT_DIR
      - mkdir $CI_PROJECT_DIR/build
      - cd $CI_PROJECT_DIR/build
      - if dpkg --compare-versions `ompi_info | head -2 | tail -1 | sed 's/[^0-9.]*\([0-9.]*\).*/\1/'` ge 1.10; then export MPIEXEC_PREFLAGS="--allow-run-as-root" ; fi
      - cmake .. -DWALBERLA_DIR=$CI_PROJECT_DIR/walberla -DWARNING_ERROR=ON -DWALBERLA_BUILD_WITH_MPI=$WALBERLA_BUILD_WITH_MPI -DWALBERLA_BUILD_WITH_OPENMP=$WALBERLA_BUILD_WITH_OPENMP -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE -DMPIEXEC_PREFLAGS=$MPIEXEC_PREFLAGS -DPE_DIR=/builds/pe -DHHG_BUILD_WITH_PETSC=$HHG_BUILD_WITH_PETSC -DPETSC_DIR=$PETSC_DIR -DPETSC_ARCH=$PETSC_ARCH
      - cmake . -LAH
      - cd $CI_PROJECT_DIR/build/apps
      - make -j $(nproc) -l $(nproc)
      - cd $CI_PROJECT_DIR/build/tests
      - make -j $(nproc) -l $(nproc)
      - ctest -LE $CTEST_EXCLUDE_LABELS -C $CMAKE_BUILD_TYPE --output-on-failure -j 2
   tags:
      - docker


.build_serial_template: &build_serial_definition
   <<: *build_definition
   variables:
      CTEST_EXCLUDE_LABELS: "longrun"
      WALBERLA_BUILD_WITH_MPI: "OFF"
      WALBERLA_BUILD_WITH_OPENMP: "OFF"
      CMAKE_BUILD_TYPE: "Release"
      WALBERLA_BUFFER_DEBUG: "OFF"
      WALBERLA_DOUBLE_ACCURACY: "ON"


.build_mpionly_template: &build_mpionly_definition
   <<: *build_definition
   variables:
       CTEST_EXCLUDE_LABELS: "longrun"
       WALBERLA_BUILD_WITH_MPI: "ON"
       WALBERLA_BUILD_WITH_OPENMP: "OFF"
       CMAKE_BUILD_TYPE: "Release"
       WALBERLA_BUFFER_DEBUG: "OFF"
       WALBERLA_DOUBLE_ACCURACY: "ON"


.build_hybrid_template: &build_hybrid_definition
   <<: *build_definition
   variables:
      CTEST_EXCLUDE_LABELS: "longrun"
      WALBERLA_BUILD_WITH_MPI: "ON"
      WALBERLA_BUILD_WITH_OPENMP: "ON"
      OMP_NUM_THREADS: "4"
      OMP_WAIT_POLICY: "PASSIVE"
      CMAKE_BUILD_TYPE: "Release"
      WALBERLA_BUFFER_DEBUG: "OFF"
      WALBERLA_DOUBLE_ACCURACY: "ON"

.build_serial_dbg_template: &build_serial_dbg_definition
   <<: *build_definition
   variables:
      CTEST_EXCLUDE_LABELS: "longrun"
      WALBERLA_BUILD_WITH_MPI: "OFF"
      WALBERLA_BUILD_WITH_OPENMP: "OFF"
      CMAKE_BUILD_TYPE: "DebugOptimized"
      WALBERLA_BUFFER_DEBUG: "OFF"
      WALBERLA_DOUBLE_ACCURACY: "ON"


.build_mpionly_dbg_template: &build_mpionly_dbg_definition
   <<: *build_definition
   variables:
       CTEST_EXCLUDE_LABELS: "longrun"
       WALBERLA_BUILD_WITH_MPI: "ON"
       WALBERLA_BUILD_WITH_OPENMP: "OFF"
       CMAKE_BUILD_TYPE: "DebugOptimized"
       WALBERLA_BUFFER_DEBUG: "OFF"
       WALBERLA_DOUBLE_ACCURACY: "ON"


.build_hybrid_dbg_template: &build_hybrid_dbg_definition
   <<: *build_definition
   variables:
      CTEST_EXCLUDE_LABELS: "longrun"
      WALBERLA_BUILD_WITH_MPI: "ON"
      WALBERLA_BUILD_WITH_OPENMP: "ON"
      OMP_NUM_THREADS: "4"
      OMP_WAIT_POLICY: "PASSIVE"
      CMAKE_BUILD_TYPE: "DebugOptimized"
      WALBERLA_BUFFER_DEBUG: "OFF"
      WALBERLA_DOUBLE_ACCURACY: "ON"

.build_hybrid_dbg_sp_template: &build_hybrid_dbg_sp_definition
   <<: *build_definition
   variables:
      CTEST_EXCLUDE_LABELS: "longrun"
      WALBERLA_BUILD_WITH_MPI: "ON"
      WALBERLA_BUILD_WITH_OPENMP: "ON"
      OMP_NUM_THREADS: "4"
      OMP_WAIT_POLICY: "PASSIVE"
      CMAKE_BUILD_TYPE: "DebugOptimized"
      WALBERLA_BUFFER_DEBUG: "OFF"
      WALBERLA_DOUBLE_ACCURACY: "OFF"

.build_petsc_template: &build_petsc_definition
   <<: *build_definition
   before_script:
      - echo "Building PETSc"
      - echo "Using up to $(nproc) processors for compilation"
      - apt-get update
      - apt-get -q -y install pkg-config gfortran
      - cd /tmp
      - git clone -b maint https://bitbucket.org/petsc/petsc petsc_src
      - cd petsc_src
      - ./configure --prefix=/tmp/petsc --download-fblaslapack --download-scalapack --download-mumps
      - make all test
      - make install
      - export PETSC_DIR="/tmp/petsc"
      - export PETSC_ARCH=""
      - cd $CI_PROJECT_DIR

.build_petsc_hybrid_template: &build_petsc_hybrid_definition
   <<: *build_petsc_definition
   variables:
      WALBERLA_BUILD_WITH_MPI: "ON"
      WALBERLA_BUILD_WITH_OPENMP: "ON"
      OMP_NUM_THREADS: "4"
      OMP_WAIT_POLICY: "PASSIVE"
      CMAKE_BUILD_TYPE: "Release"
      HHG_BUILD_WITH_PETSC: "ON"

###############################################################################
##                                                                           ##
##    Linux builds                                                           ##
##                                                                           ##
###############################################################################



intel_17_hybrid:
   <<: *build_hybrid_definition
   image: i10git.cs.fau.de:5005/walberla/buildenvs/intel:17
   tags:
      - docker
      - intel

intel_17_serial_dbg:
   <<: *build_serial_dbg_definition
   image: i10git.cs.fau.de:5005/walberla/buildenvs/intel:17
   tags:
      - docker
      - intel

intel_17_mpionly_dbg:
   <<: *build_mpionly_dbg_definition
   image: i10git.cs.fau.de:5005/walberla/buildenvs/intel:17
   tags:
      - docker
      - intel

intel_17_hybrid_dbg:
   <<: *build_hybrid_dbg_definition
   image: i10git.cs.fau.de:5005/walberla/buildenvs/intel:17
   tags:
      - docker
      - intel

intel_17_hybrid_dbg_sp:
   <<: *build_hybrid_dbg_sp_definition
   image: i10git.cs.fau.de:5005/walberla/buildenvs/intel:17
   tags:
      - docker
      - intel

gcc_5_hybrid:
   <<: *build_hybrid_definition
   image: i10git.cs.fau.de:5005/walberla/buildenvs/gcc:5
   tags:
      - cuda
      - docker

gcc_6_hybrid:
   <<: *build_hybrid_definition
   image: i10git.cs.fau.de:5005/walberla/buildenvs/gcc:6
   tags:
      - docker

gcc_6_serial_dbg:
   <<: *build_serial_dbg_definition
   image: i10git.cs.fau.de:5005/walberla/buildenvs/gcc:6
   tags:
      - docker

gcc_6_mpionly_dbg:
   <<: *build_mpionly_dbg_definition
   image: i10git.cs.fau.de:5005/walberla/buildenvs/gcc:6
   tags:
      - docker

gcc_6_hybrid_dbg:
   <<: *build_hybrid_dbg_definition
   image: i10git.cs.fau.de:5005/walberla/buildenvs/gcc:6
   tags:
      - docker

gcc_6_hybrid_dbg_sp:
   <<: *build_hybrid_dbg_sp_definition
   image: i10git.cs.fau.de:5005/walberla/buildenvs/gcc:6
   tags:
      - docker

clang_3.5_mpionly:
   <<: *build_mpionly_definition
   image: i10git.cs.fau.de:5005/walberla/buildenvs/clang:3.5
   only:
      - triggers
   tags:
      - cuda
      - docker

clang_4.0_hybrid:
   <<: *build_hybrid_definition
   image: i10git.cs.fau.de:5005/walberla/buildenvs/clang:4.0
   tags:
      - docker

clang_4.0_serial_dbg:
   <<: *build_serial_dbg_definition
   image: i10git.cs.fau.de:5005/walberla/buildenvs/clang:4.0
   tags:
      - docker

clang_4.0_mpionly_dbg:
   <<: *build_mpionly_dbg_definition
   image: i10git.cs.fau.de:5005/walberla/buildenvs/clang:4.0
   tags:
      - docker

clang_4.0_hybrid_dbg:
   <<: *build_hybrid_dbg_definition
   image: i10git.cs.fau.de:5005/walberla/buildenvs/clang:4.0
   tags:
      - docker

clang_4.0_hybrid_dbg_sp:
   <<: *build_hybrid_dbg_sp_definition
   image: i10git.cs.fau.de:5005/walberla/buildenvs/clang:4.0
   tags:
      - docker



###############################################################################
##                                                                           ##
##    Documentation                                                         ##
##                                                                           ##
###############################################################################

pages:
  image: walberla/buildenv-ubuntu-basic:16.04
  script:
   - git clone --depth 1 --branch master https://i10git.cs.fau.de/walberla/walberla.git
   - export CCACHE_BASEDIR=$CI_PROJECT_DIR
   - mkdir $CI_PROJECT_DIR/build
   - cd $CI_PROJECT_DIR/build
   - cmake .. -DWALBERLA_DIR=$CI_PROJECT_DIR/walberla
   - make doc_tinyhhg
   - mkdir $CI_PROJECT_DIR/public
   - mv doc/html/* $CI_PROJECT_DIR/public/
  artifacts:
    paths:
    - public
  only:
    - master
  tags:
   - docker


###############################################################################
##                                                                           ##
##    Code analysis                                                          ##
##                                                                           ##
###############################################################################

# cppcheck:
#    image: walberla/cppcheck
#    script:
#       - cppcheck --version
#       - cppcheck . --max-configs=10 --enable=warning --enable=style --enable=performance --enable=portability -i src/gui/extern -i src/geometry/structured/extern -i sqlite3.c -i StackWalker.cpp -I src/ -I tests/ -I apps/ -D WALBERLA_BUILD_WITH_MPI -D WALBERLA_BUILD_WITH_METIS -D WALBERLA_BUILD_WITH_BOOST_THREAD -D WALBERLA_BUILD_WITH_PYTHON --xml 2> report.xml
#       - cppcheck-htmlreport --file=report.xml --report-dir=html_report --source-dir=.
#    artifacts:
#       untracked: true
#    only:
#       - triggers
#    tags:
#       - docker
# 
# 
# coverage:
#    image: walberla/coverage
#    script:
#       - $CXX --version
#       - cmake --version
#       - gcovr --version
#       - mkdir build
#       - cd build
#       - if dpkg --compare-versions `ompi_info | head -2 | tail -1 | sed 's/[^0-9.]*\([0-9.]*\).*/\1/'` ge 1.10; then export MPIEXEC_PREFLAGS="--allow-run-as-root" ; fi
#       - cmake .. -DWALBERLA_BUILD_TESTS=ON -DWALBERLA_BUILD_BENCHMARKS=ON -DWALBERLA_BUILD_TUTORIALS=ON -DWALBERLA_BUILD_WITH_MPI=ON -DWALBERLA_BUILD_WITH_OPENMP=OFF -DCMAKE_BUILD_TYPE=Debug -DMPIEXEC_PREFLAGS=$MPIEXEC_PREFLAGS
#       - cmake . -LAH
#       - make -j 8
#       - ctest -LE longrun --output-on-failure -j 8_Hybrid
#       - cd ..
#       - mkdir coverage
#       - cd coverage
#       - pwd
#       - gcovr -r $CI_PROJECT_DIR -f ".*\\/src\\/.*" -k
#       - gcovr -r $CI_PROJECT_DIR -f ".*\\/src\\/.*" --html --html-details -o coverage.html -g
#    artifacts:
#       paths:
#          - coverage/
#    only:
#       - triggers
#    tags:
#       - docker
#    variables:
#       CXXFLAGS: "-fprofile-arcs -ftest-coverage -fPIC -O0"
#       LDFLAGS: "-fprofile-arcs -ftest-coverage -fPIC -O0"



###############################################################################
##                                                                           ##
##    Windows Builds                                                         ##
##                                                                           ##
###############################################################################
      
     
.win_build_template: &win_build_definition
   tags:
      - win
   script:
      - export PreferredToolArchitecture=x64
      - export OMP_NUM_THREADS=4
      - export OMP_WAIT_POLICY="PASSIVE"
      - export MSMPI_DISABLE_SHM=1
      - export
      - cmake --version
      - git clone --depth 1 --branch master https://i10git.cs.fau.de/walberla/walberla.git
      - mkdir build
      - cd build
      - cmake -LAH -DWALBERLA_DIR=../walberla -DWALBERLA_BUILD_BENCHMARKS=OFF -DWALBERLA_BUILD_TUTORIALS=OFF -DWALBERLA_BUILD_WITH_MPI=$WALBERLA_BUILD_WITH_MPI -DWALBERLA_BUILD_WITH_OPENMP=$WALBERLA_BUILD_WITH_OPENMP -DWALBERLA_DOUBLE_ACCURACY=$WALBERLA_DOUBLE_ACCURACY -DWARNING_ERROR=OFF -G "$CMAKE_GENERATOR" ..
      - cmake --build . --config $BUILD_CONFIGURATION -- /maxcpucount:4
      #- cd tests
      #- ctest -LE $CTEST_EXCLUDE_LABELS -C $BUILD_CONFIGURATION --output-on-failure -j 4

      
msvc-14.1_Hybrid_Dbg:
   <<: *win_build_definition
   variables:
      CMAKE_GENERATOR: "Visual Studio 15 2017 Win64"
      BUILD_CONFIGURATION: "DebugOptimized"
      CTEST_EXCLUDE_LABELS: "longrun"
      WALBERLA_BUILD_WITH_MPI: "ON"
      WALBERLA_BUILD_WITH_OPENMP: "ON"
      WALBERLA_DOUBLE_ACCURACY: "ON"
      
msvc-14.1_Hybrid:
   <<: *win_build_definition
   variables:
      CMAKE_GENERATOR: "Visual Studio 15 2017 Win64"
      BUILD_CONFIGURATION: "Release"
      CTEST_EXCLUDE_LABELS: "longrun"
      WALBERLA_BUILD_WITH_MPI: "ON"
      WALBERLA_BUILD_WITH_OPENMP: "ON"
      WALBERLA_DOUBLE_ACCURACY: "ON"
      
msvc-14.1_Serial_Dbg:
   <<: *win_build_definition
   variables:
      CMAKE_GENERATOR: "Visual Studio 15 2017 Win64"
      BUILD_CONFIGURATION: "DebugOptimized"
      CTEST_EXCLUDE_LABELS: "longrun"
      WALBERLA_BUILD_WITH_MPI: "OFF"
      WALBERLA_BUILD_WITH_OPENMP: "OFF"
      WALBERLA_DOUBLE_ACCURACY: "ON"
      
msvc-14.1_MpiOnly_Dbg:
   <<: *win_build_definition
   variables:
      CMAKE_GENERATOR: "Visual Studio 15 2017 Win64"
      BUILD_CONFIGURATION: "DebugOptimized"
      CTEST_EXCLUDE_LABELS: "longrun"
      WALBERLA_BUILD_WITH_MPI: "ON"
      WALBERLA_BUILD_WITH_OPENMP: "OFF"
      WALBERLA_DOUBLE_ACCURACY: "ON"